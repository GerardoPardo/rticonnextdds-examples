
/* SerializedType_publisher.cxx

A publication of data of type SerializedType

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> SerializedType.idl

Example publication of type SerializedType automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription with the command
objs/<arch>/SerializedType_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs/<arch>/SerializedType_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/SerializedType_publisher <domain_id> o
objs/<arch>/SerializedType_subscriber <domain_id> 

On Windows:

objs\<arch>\SerializedType_publisher <domain_id>  
objs\<arch>\SerializedType_subscriber <domain_id>    

*/

#include <stdio.h>
#include <stdlib.h>

#include "SerializedType.h"
#include "SerializedTypeSupport.h"
#include "ndds/ndds_cpp.h"
#include "ShapeType.h"
#include "SerializedTypePlugin.h"
#include "ShapeTypePlugin.h"

/* Delete all entities */
static int publisher_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*

    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "finalize_instance error %d\n", retcode);
        status = -1;
    }
    */

    return status;
}

void strcpy_s(char * str, int lenMax, const char * strToCopy) {
    if (!str || !strToCopy) {
        return;
    }
    int strToCopyLen = strlen(strToCopy) + 1;
    if(strToCopyLen < lenMax) {
        lenMax = strToCopyLen;
    }
    strncpy(str, strToCopy, lenMax);
    str[lenMax - 1] = '\0';
}

extern "C" int publisher_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSPublisher *publisher = NULL;
    DDSTopic *topic = NULL;
    DDSDataWriter *writer = NULL;
    SerializedTypeDataWriter * SerializedType_writer = NULL;
    SerializedType *instance = NULL;
    DDS_ReturnCode_t retcode;
    DDS_InstanceHandle_t instance_handle = DDS_HANDLE_NIL;
    const char *type_name = NULL;
    int count = 0, i = 0;  
    DDS_Duration_t send_period = {1,0};

    /* To customize participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        fprintf(stderr, "create_participant error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize publisher QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    publisher = participant->create_publisher(
        DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (publisher == NULL) {
        fprintf(stderr, "create_publisher error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* A new method named register_type_2 needs to be added to the header file */
    retcode = SerializedTypeTypeSupport::register_type2(participant, 
            "ShapeType", ShapeType_get_typecode());
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "register_type error %d\n", retcode);
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        "Square",
        "ShapeType", DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        fprintf(stderr, "create_topic error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize data writer QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    writer = publisher->create_datawriter(
        topic, DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
        fprintf(stderr, "create_datawriter error\n");
        publisher_shutdown(participant);
        return -1;
    }
    SerializedType_writer = SerializedTypeDataWriter::narrow(writer);
    if (SerializedType_writer == NULL) {
        fprintf(stderr, "DataWriter narrow error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Create data sample for writing */
    instance = SerializedTypePluginSupport_create_data_ex(DDS_BOOLEAN_TRUE);
    if (instance == NULL) {
        fprintf(stderr, "SerializedTypeTypeSupport::create_data error\n");
        publisher_shutdown(participant);
        return -1;
    }
    instance->serialized_data.maximum(0);

    ShapeType shapeType;
    ShapeType_initialize(&shapeType);
    #define NUMBER_OF_COLORS (4)
    char *colors[NUMBER_OF_COLORS] = { "GREEN", "RED", "BLUE", "YELLOW" };
    int  xbase[NUMBER_OF_COLORS] = { 10, 50, 100, 150 };
    int  ybase[NUMBER_OF_COLORS] = {  0,  0,  0,   0 };

    /* Memory area where to put the serialized (ShapeType) data */
    unsigned int serializationLength;
    unsigned int serializationBufferSize = ShapeTypePlugin_get_serialized_sample_max_size(NULL, RTI_TRUE, 0, 0);

    /* RTI_CDR_MAX_SERIALIZED_SIZE indites the type is unbounded normally the application
       would have some knwledge of the size. Here we print an error in this situation */
    if (serializationBufferSize == RTI_CDR_MAX_SERIALIZED_SIZE) {
        fprintf(stderr, "Type is unbounded. Please enter buffer size manually here\n");
        return publisher_shutdown(participant);
    }

    DDS_Octet *serializationBuffer = (DDS_Octet *) malloc(serializationBufferSize);

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

        printf("Writing ShapeType, count %d\n", count);
        strcpy_s(shapeType.color, COLOR_LENGTH_MAX, colors[count % NUMBER_OF_COLORS]);
        shapeType.x = (xbase[count % NUMBER_OF_COLORS] + count) % 250;
        shapeType.y = (ybase[count % NUMBER_OF_COLORS] + 2*count) % 250;
        shapeType.shapesize = 20 + count % 30;
        /* Use ShapeTypePlugin to serialize into an application buffer.
           Serialization includes the 4-byte SerializationHeader.

           Note: serializationLength on input it is the maximum size.
                 On successful output it is the number of bytes used for 
                 the serialization 
        */
        serializationLength = serializationBufferSize;
        if (!ShapeTypePlugin_serialize_to_cdr_buffer((char *)serializationBuffer, &serializationLength, &shapeType)) {
            fprintf(stderr, "Serialization of ShapeType failed\n");
        } else {

            /* At this point:
                  serializationBuffer  - contains the serialized shapeType
                  serializationLength  - contains the number of bytes in serializationBuffer used by the serialization 
             */
            /* Use DDS_OctetSeq_loan_contiguous() instead of DDS_OctetSeq_copy() to save one copy */

            (instance->serialized_data).loan_contiguous(serializationBuffer, serializationLength, serializationBufferSize);

            // /* TODO: Use ShapeType_serialize_key */ 
            for (i = 0; i < 16; ++i) {
                instance->key_hash[i] = (char)(count % NUMBER_OF_COLORS);
            }
            
            retcode = SerializedType_writer->write(*instance, instance_handle);
            if (retcode != DDS_RETCODE_OK) {
                fprintf(stderr, "write error %d\n", retcode);
            }

            instance->serialized_data.unloan();
        }

        NDDSUtility::sleep(send_period);
    }

    /*
    retcode = SerializedType_writer->unregister_instance(
        *instance, instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "unregister instance error %d\n", retcode);
    }
    */

    /* Delete data sample */
    retcode = SerializedTypeTypeSupport::delete_data(instance);
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "SerializedTypeTypeSupport::delete_data error %d\n", retcode);
    }

    /* Cleanup and delete delete all entities */ 
    free(serializationBuffer);

    /* Delete all entities */
    return publisher_shutdown(participant);
}

int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    // NDDSConfigLogger::get_instance()->
    // set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    // NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);

    return publisher_main(domainId, sample_count);
}

